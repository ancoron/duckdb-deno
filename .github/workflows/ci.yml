name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on:
      - ${{ matrix.os.type }}-${{ matrix.os.version }}
      - ${{ matrix.os.arch }}
    strategy:
      matrix:
        os:
          - type: macos
            version: 14
            arch: macos
          - type: macos
            version: 13
            arch: macos
          - type: ubuntu
            version: 24.04
            arch: x64
          - type: ubuntu
            version: 22.04
            arch: x64
          - type: ubuntu
            version: 24.04
            arch: aarch64
          - type: ubuntu
            version: 22.04
            arch: aarch64
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: typecheck & formatting
        shell: bash
        run: |
          set -xeuo pipefail
          deno cache --unstable mod.ts
          deno fmt --check

      - name: build (MacOS)
        shell: bash
        if: matrix.os.type == 'macos'
        run: |
          mkdir bin
          brew install duckdb
          ./build.sh

      - name: run tests (MacOS)
        shell: bash
        if: matrix.os.type == 'macos'
        run: |
          set -xeuo pipefail
          DYLD_LIBRARY_PATH=bin deno task test

      - name: build (linux)
        shell: bash
        if: matrix.os.type == 'ubuntu'
        run: |
          ./build-linux.sh

      - name: run tests (linux)
        shell: bash
        if: matrix.os.type == 'ubuntu'
        run: |
          set -xeuo pipefail
          LD_LIBRARY_PATH=bin deno task test

      - name: Release
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "release draft"
          draft: true
          files: |
            bin/libduckdb-deno.dylib
            bin/libduckdb-deno.so
